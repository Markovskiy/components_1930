/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _menu = __webpack_require__(1);
	
	var _menu2 = _interopRequireDefault(_menu);
	
	var _form = __webpack_require__(9);
	
	var _form2 = _interopRequireDefault(_form);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var menu = new _menu2.default({
		el: document.querySelector('.js-menu'),
		data: {
			title: 'Список сайтов',
			items: [{
				href: 'https://vk.com/',
				anchor: 'vk.com'
			}, {
				href: 'http://ok.ru/',
				anchor: 'ok.ru'
			}, {
				href: 'https://yahoo.com/',
				anchor: 'yahoo.com'
			}, {
				href: 'https://google.com/',
				anchor: 'google.com'
			}, {
				href: 'http://ya.ru/',
				anchor: 'ya.ru'
			}]
		}
	});
	
	var form = new _form2.default({
		el: document.querySelector('.js-form'),
		data: {
			hint: {
				anchor: 'Название',
				href: 'Ссылка'
			}
		}
	});
	
	console.log(menu);
	console.log(form);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(2);
	
	var _menu = __webpack_require__(6);
	
	var _menu2 = _interopRequireDefault(_menu);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Menu
	 * Компонента "Меню"
	 */
	
	var Menu = function () {
	
		/**
	  * @constructor
	  * @param {Object} options
	  * @param {HTMLElement} options.el
	  * @param {Object} options.data
	  */
	
		function Menu(options) {
			_classCallCheck(this, Menu);
	
			this.el = options.el;
			this.data = options.data;
	
			this.render();
	
			this.list = this.el.querySelector('.menu__list');
	
			this._initEvents();
		}
	
		/**
	 * Развешиваем события
	 */
	
	
		_createClass(Menu, [{
			key: '_initEvents',
			value: function _initEvents() {
				this.el.addEventListener('click', this._onClick.bind(this));
			}
	
			/**
	  * Клик в любую область меню
	  * @param {Event} event
	  */
	
		}, {
			key: '_onClick',
			value: function _onClick(event) {
				event.preventDefault();
				var item = event.target;
	
				switch (item.dataset.action) {
					case 'toggle':
						this.el.classList.toggle('menu_open');
						break;
	
					case 'remove':
						this.removeItem(item);
						break;
	
					case 'pick':
						this.pickItem(item);
						break;
	
					default:
						break;
				}
			}
	
			/**
	  * Выбор элемента меню
	  * @param {HTMLElement} item
	  */
	
		}, {
			key: 'pickItem',
			value: function pickItem(item) {
				this.trigger('pick', {
					href: item.getAttribute('href'),
					anchor: item.textContent
				});
			}
	
			/**
	  * Удаления элемента меню
	  * @param {HTMLElement} item
	  */
	
		}, {
			key: 'removeItem',
			value: function removeItem(item) {
				var index = parseInt(item.parentNode.dataset.index, 10);
	
				this.trigger('remove', {
					index: index
				});
	
				this.list.removeChild(item.parentNode);
			}
	
			/**
	  * Сказать миру о случившемся
	  * @param {string} name тип события
	  * @param {Object} data объект события
	  */
	
		}, {
			key: 'trigger',
			value: function trigger(name, data) {
				var menuEvent = new CustomEvent(name, {
					detail: data
				});
	
				this.el.dispatchEvent(menuEvent);
				console.log(name, data);
			}
	
			/**
	   * Рисуем меню
	   */
	
		}, {
			key: 'render',
			value: function render() {
				this.el.innerHTML = (0, _menu2.default)(this.data);
			}
		}]);
	
		return Menu;
	}();
	
	exports.default = Menu;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(3);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(5)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./menu.css", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./menu.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(4)();
	// imports
	
	
	// module
	exports.push([module.id, ".menu__label {\n\tbackground: url(/public/images/icon/ic_menu_black_24px.svg) 0 0 no-repeat;\n\tleft: 4px;\n}\n\n.menu__show {\n\tbackground: url(/public/images/icon/ic_keyboard_arrow_down_black_24px.svg) 0 0 no-repeat;\n\tright: 4px;\n}\n\n.menu__http {\n\tbackground: url(/public/images/icon/ic_http_black_24px.svg) 0 0 no-repeat;\n\tleft: 40px;\n}\n\n.menu__https {\n\tbackground: url(/public/images/icon/ic_https_black_24px.svg) 0 0 no-repeat;\n\tleft: 40px;\n}\n\n.menu__item-remove {\n\tbackground: url(/public/images/icon/ic_delete_black_24px.svg) 0 0 no-repeat;\n\tright: 4px;\n\tdisplay: none;\n\tcursor: pointer;\n}\n\n.menu__show:focus {\n\toutline: none;\n}\n\n.menu_open .menu__list {\n\tdisplay: block;\n}\n\n.menu_open .menu__show {\n\ttransform: rotate(180deg);\n}\n\n.menu__list {\n\tpadding: 8px 0;\n}\n\n.menu__title {\n\t-webkit-user-select: none;\n}\n\n.menu__title, .menu__item {\n\tpadding: 16px 16px 16px 72px;\n\tposition: relative;\n\tline-height: 16px;\n\tcursor: pointer;\n\tbackground-color: #fff;\n\tborder-radius: 2px 2px 0 0;\n\ttransition: background-color .3s;\n}\n\n.menu__title:hover, .menu__item:hover {\n\tbackground-color: #e7e7e7;\n}\n\n.menu__item {\n\tpadding: 16px 16px 16px 108px;\n}\n\n.menu__item:hover .menu__item-remove {\n\tdisplay: block;\n}\n\n.menu__list {\n\tdisplay: none;\n}\n", ""]);
	
	// exports


/***/ },
/* 4 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(7);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (items, title, undefined) {
	buf.push("<div data-action=\"toggle\" class=\"menu__title\"><i class=\"menu__label icon\"></i>" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "<i class=\"menu__show icon\"></i></div><div class=\"menu__list\">");
	// iterate items
	;(function(){
	  var $$obj = items;
	  if ('number' == typeof $$obj.length) {
	
	    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
	      var item = $$obj[index];
	
	buf.push("<div data-action=\"pick\"" + (jade.attr("data-index", index, true, true)) + " class=\"menu__item\">");
	if ( item.href.indexOf('https') !== -1)
	{
	buf.push("<i class=\"icon menu__https\"></i>");
	}
	else
	{
	buf.push("<i class=\"icon menu__http\"></i>");
	}
	buf.push((jade.escape(null == (jade_interp = item.anchor) ? "" : jade_interp)) + "<i data-action=\"remove\" class=\"menu__item-remove icon\"></i></div>");
	    }
	
	  } else {
	    var $$l = 0;
	    for (var index in $$obj) {
	      $$l++;      var item = $$obj[index];
	
	buf.push("<div data-action=\"pick\"" + (jade.attr("data-index", index, true, true)) + " class=\"menu__item\">");
	if ( item.href.indexOf('https') !== -1)
	{
	buf.push("<i class=\"icon menu__https\"></i>");
	}
	else
	{
	buf.push("<i class=\"icon menu__http\"></i>");
	}
	buf.push((jade.escape(null == (jade_interp = item.anchor) ? "" : jade_interp)) + "<i data-action=\"remove\" class=\"menu__item-remove icon\"></i></div>");
	    }
	
	  }
	}).call(this);
	
	buf.push("</div>");}.call(this,"items" in locals_for_with?locals_for_with.items:typeof items!=="undefined"?items:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined));;return buf.join("");
	}

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Merge two attribute objects giving precedence
	 * to values in object `b`. Classes are special-cased
	 * allowing for arrays and merging/joining appropriately
	 * resulting in a string.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api private
	 */
	
	exports.merge = function merge(a, b) {
	  if (arguments.length === 1) {
	    var attrs = a[0];
	    for (var i = 1; i < a.length; i++) {
	      attrs = merge(attrs, a[i]);
	    }
	    return attrs;
	  }
	  var ac = a['class'];
	  var bc = b['class'];
	
	  if (ac || bc) {
	    ac = ac || [];
	    bc = bc || [];
	    if (!Array.isArray(ac)) ac = [ac];
	    if (!Array.isArray(bc)) bc = [bc];
	    a['class'] = ac.concat(bc).filter(nulls);
	  }
	
	  for (var key in b) {
	    if (key != 'class') {
	      a[key] = b[key];
	    }
	  }
	
	  return a;
	};
	
	/**
	 * Filter null `val`s.
	 *
	 * @param {*} val
	 * @return {Boolean}
	 * @api private
	 */
	
	function nulls(val) {
	  return val != null && val !== '';
	}
	
	/**
	 * join array as classes.
	 *
	 * @param {*} val
	 * @return {String}
	 */
	exports.joinClasses = joinClasses;
	function joinClasses(val) {
	  return (Array.isArray(val) ? val.map(joinClasses) :
	    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
	    [val]).filter(nulls).join(' ');
	}
	
	/**
	 * Render the given classes.
	 *
	 * @param {Array} classes
	 * @param {Array.<Boolean>} escaped
	 * @return {String}
	 */
	exports.cls = function cls(classes, escaped) {
	  var buf = [];
	  for (var i = 0; i < classes.length; i++) {
	    if (escaped && escaped[i]) {
	      buf.push(exports.escape(joinClasses([classes[i]])));
	    } else {
	      buf.push(joinClasses(classes[i]));
	    }
	  }
	  var text = joinClasses(buf);
	  if (text.length) {
	    return ' class="' + text + '"';
	  } else {
	    return '';
	  }
	};
	
	
	exports.style = function (val) {
	  if (val && typeof val === 'object') {
	    return Object.keys(val).map(function (style) {
	      return style + ':' + val[style];
	    }).join(';');
	  } else {
	    return val;
	  }
	};
	/**
	 * Render the given attribute.
	 *
	 * @param {String} key
	 * @param {String} val
	 * @param {Boolean} escaped
	 * @param {Boolean} terse
	 * @return {String}
	 */
	exports.attr = function attr(key, val, escaped, terse) {
	  if (key === 'style') {
	    val = exports.style(val);
	  }
	  if ('boolean' == typeof val || null == val) {
	    if (val) {
	      return ' ' + (terse ? key : key + '="' + key + '"');
	    } else {
	      return '';
	    }
	  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
	    if (JSON.stringify(val).indexOf('&') !== -1) {
	      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
	                   'will be escaped to `&amp;`');
	    };
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will eliminate the double quotes around dates in ' +
	                   'ISO form after 2.0.0');
	    }
	    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
	  } else if (escaped) {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + exports.escape(val) + '"';
	  } else {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + val + '"';
	  }
	};
	
	/**
	 * Render the given attributes object.
	 *
	 * @param {Object} obj
	 * @param {Object} escaped
	 * @return {String}
	 */
	exports.attrs = function attrs(obj, terse){
	  var buf = [];
	
	  var keys = Object.keys(obj);
	
	  if (keys.length) {
	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i]
	        , val = obj[key];
	
	      if ('class' == key) {
	        if (val = joinClasses(val)) {
	          buf.push(' ' + key + '="' + val + '"');
	        }
	      } else {
	        buf.push(exports.attr(key, val, false, terse));
	      }
	    }
	  }
	
	  return buf.join('');
	};
	
	/**
	 * Escape the given string of `html`.
	 *
	 * @param {String} html
	 * @return {String}
	 * @api private
	 */
	
	var jade_encode_html_rules = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};
	var jade_match_html = /[&<>"]/g;
	
	function jade_encode_char(c) {
	  return jade_encode_html_rules[c] || c;
	}
	
	exports.escape = jade_escape;
	function jade_escape(html){
	  var result = String(html).replace(jade_match_html, jade_encode_char);
	  if (result === '' + html) return html;
	  else return result;
	};
	
	/**
	 * Re-throw the given `err` in context to the
	 * the jade in `filename` at the given `lineno`.
	 *
	 * @param {Error} err
	 * @param {String} filename
	 * @param {String} lineno
	 * @api private
	 */
	
	exports.rethrow = function rethrow(err, filename, lineno, str){
	  if (!(err instanceof Error)) throw err;
	  if ((typeof window != 'undefined' || !filename) && !str) {
	    err.message += ' on line ' + lineno;
	    throw err;
	  }
	  try {
	    str = str || __webpack_require__(8).readFileSync(filename, 'utf8')
	  } catch (ex) {
	    rethrow(err, null, lineno)
	  }
	  var context = 3
	    , lines = str.split('\n')
	    , start = Math.max(lineno - context, 0)
	    , end = Math.min(lines.length, lineno + context);
	
	  // Error context
	  var context = lines.slice(start, end).map(function(line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? '  > ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');
	
	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'Jade') + ':' + lineno
	    + '\n' + context + '\n\n' + err.message;
	  throw err;
	};
	
	exports.DebugItem = function DebugItem(lineno, filename) {
	  this.lineno = lineno;
	  this.filename = filename;
	}


/***/ },
/* 8 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(10);
	
	var _form = __webpack_require__(12);
	
	var _form2 = _interopRequireDefault(_form);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Form
	 * Компонента "Форма"
	 */
	
	var Form = function () {
	
		/**
	  * @constructor
	  * @param {Object} options
	  * @param {HTMLElement} options.el
	  */
	
		function Form(options) {
			_classCallCheck(this, Form);
	
			this.el = options.el;
			this.data = options.data;
	
			this.render();
	
			this._initEvents();
		}
	
		/**
	 * Развешиваем события
	 */
	
	
		_createClass(Form, [{
			key: '_initEvents',
			value: function _initEvents() {
				this.el.addEventListener('click', this._onClick.bind(this));
	
				this.el.addEventListener('submit', this._onSubmit.bind(this));
	
				this.el.addEventListener('focus', this._onFocusInput.bind(this), true);
	
				this.el.addEventListener('blur', this._onBlurInput.bind(this), true);
			}
	
			/**
	   * Фокус на поле ввода
	   * @param {Event} event
	   */
	
		}, {
			key: '_onFocusInput',
			value: function _onFocusInput(event) {
				if (event.target.tagName === 'INPUT') {
					event.target.parentNode.classList.add('form__input-container--focus');
				}
			}
	
			/**
	   * Снятие фокуса с поля ввода
	   * @param {Event} event
	   */
	
		}, {
			key: '_onBlurInput',
			value: function _onBlurInput(event) {
				var valueClass = 'form__input-container--value';
	
				if (event.target.tagName === 'INPUT') {
					event.target.parentNode.classList.remove('form__input-container--focus');
	
					if (event.target.value) {
						event.target.parentNode.classList.add(valueClass);
					} else {
						event.target.parentNode.classList.remove(valueClass);
					}
				}
			}
	
			/**
	   * Отправка формы
	   * @param {Event} event
	   */
	
		}, {
			key: '_onSubmit',
			value: function _onSubmit(event) {
				event.preventDefault();
	
				this.trigger('add', {
					href: this.getField('href').value,
					anchor: this.getField('anchor').value
				});
	
				this._hideAddBlock();
	
				event.target.reset();
			}
		}, {
			key: '_hideAddBlock',
			value: function _hideAddBlock() {
				this.el.querySelector('.form__add-block').style.display = 'none';
				this.el.querySelector('.form__add-button').style.display = 'block';
			}
	
			/**
	  * Клик в любую область меню
	  * @param {Event} event
	  */
	
		}, {
			key: '_onClick',
			value: function _onClick(event) {
				event.preventDefault();
				var item = event.target;
	
				switch (item.dataset.action) {
					case 'add':
						this.el.querySelector('.form__add-block').style.display = 'block';
						item.style.display = 'none';
						break;
	
					case 'close':
						this._hideAddBlock();
						break;
	
					default:
						break;
				}
			}
	
			/**
	  * Сказать миру о случившемся
	  * @param {string} name тип события
	  * @param {Object} data объект события
	  */
	
		}, {
			key: 'trigger',
			value: function trigger(name, data) {
				var formEvent = new CustomEvent(name, {
					detail: data
				});
	
				this.el.dispatchEvent(formEvent);
				console.log(name, data);
			}
	
			/**
	   * Рисуем форму
	   */
	
		}, {
			key: 'render',
			value: function render() {
				this.el.innerHTML = (0, _form2.default)(this.data);
			}
		}]);
	
		return Form;
	}();
	
	exports.default = Form;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(11);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(5)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./form.css", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./form.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(4)();
	// imports
	
	
	// module
	exports.push([module.id, ".form {\n\tpadding: 0 16px;\n}\n\n.form__add-block {\n\tdisplay: none;\n}\n\n.form__add-button {\n\tbackground-color: #00BCD4;\n\tcolor: #fff;\n}\n\n.form__buttons {\n\tdisplay: flex;\n}\n\n.form__buttons-close {\n\tbackground-color: #fff;\n\tcolor: #212121;\n\tmargin-right: 16px;\n}\n\n.form__buttons-close:hover {\n\tbackground-color: #EBEBEB;\n}\n\n.form__buttons-save {\n\tbackground-color: #00BCD4;\n\tcolor: #fff;\n}\n\n.form__add-button:hover, .form__buttons-save:hover {\n\tbackground-color: #66D7E6;\n}\n\n.form__input-container {\n\tfont-size: 16px;\n\tline-height: 24px;\n\twidth: 100%;\n\theight: 72px;\n\tdisplay: inline-block;\n\tposition: relative;\n\ttransition: height 200ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n\n.form__input-label {\n\tposition: absolute;\n\tline-height: 22px;\n\ttop: 38px;\n\ttransition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n\tz-index: 1;\n\tcursor: text;\n\ttransform: scale(1) translate3d(0px, 0px, 0px);\n\ttransform-origin: left top 0px;\n\tpointer-events: none;\n\tcolor: rgba(0, 0, 0, 0.298039);\n\t-webkit-user-select: none;\n}\n\n.form__input-container.form__input-container--focus .form__input-label {\n\ttransform: perspective(1px) scale(0.75) translate3d(0px, -28px, 0px);\n\tcolor: rgb(0, 188, 212);\n}\n\n.form__input-container.form__input-container--value .form__input-label {\n\ttransform: perspective(1px) scale(0.75) translate3d(0px, -28px, 0px);\n}\n\n.form__input-text {\n\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\tpadding: 0px;\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\tborder: none;\n\toutline: none;\n\tcolor: rgba(0, 0, 0, 0.870588);\n\tmargin-top: 14px;\n\tbackground-color: rgba(0, 0, 0, 0);\n}\n\n.form__input-hr {\n\tborder-bottom-width: 1px;\n\tborder-style: none none solid;\n\tborder-color: rgb(224, 224, 224);\n\tbottom: 8px;\n\tmargin: 0;\n\tposition: absolute;\n\twidth: 100%;\n}\n\n.form__input-hr--focus {\n\tborder-bottom-width: 2px;\n\tborder-color: rgb(0, 188, 212);\n\ttransform: scaleX(0);\n\ttransition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n}\n\n.form__input-container.form__input-container--focus .form__input-hr--focus {\n\ttransform: scaleX(1);\n}\n", ""]);
	
	// exports


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(7);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (hint) {
	buf.push("<div data-action=\"add\" class=\"form__add-button btn-default\">Добавить</div><div class=\"form__add-block\"><div class=\"form__input-container\"><label class=\"form__input-label\">" + (jade.escape(null == (jade_interp = hint.anchor) ? "" : jade_interp)) + "</label><input type=\"text\" name=\"anchor\" required=\"required\" class=\"form__input-text\"><div><hr class=\"form__input-hr\"><hr class=\"form__input-hr form__input-hr--focus\"></div></div><div class=\"form__input-container\"><label class=\"form__input-label\">" + (jade.escape(null == (jade_interp = hint.href) ? "" : jade_interp)) + "</label><input type=\"url\" name=\"href\" required=\"required\" class=\"form__input-text\"><div><hr class=\"form__input-hr\"><hr class=\"form__input-hr form__input-hr--focus\"></div></div><div class=\"form__buttons\"><div data-action=\"close\" class=\"form__buttons-close btn-default\">Отменить</div><button class=\"form__buttons-save btn-default\">Сохранить</button></div></div>");}.call(this,"hint" in locals_for_with?locals_for_with.hint:typeof hint!=="undefined"?hint:undefined));;return buf.join("");
	}

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,